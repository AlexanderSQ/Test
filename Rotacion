-- =====================================================================
-- Script para Rotación de Column Master Key (CMK) con Medición de Tiempos
-- Proceso idéntico al clic derecho en SSMS
-- =====================================================================

-- Crear tabla temporal para almacenar tiempos de ejecución
CREATE TABLE #TiemposEjecucion (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    Proceso NVARCHAR(100),
    FechaHoraInicio DATETIME2(3),
    FechaHoraFin DATETIME2(3),
    TiempoEjecucionMS INT,
    TiempoEjecucionSegundos DECIMAL(10,3),
    Estado NVARCHAR(50),
    Observaciones NVARCHAR(500)
);

-- Variables para configuración
DECLARE @CMK_Source NVARCHAR(128) = 'CMK_FUNCTIONAL_AUDIT';  -- CMK actual
DECLARE @CMK_Target NVARCHAR(128) = 'CMK_FUNCTIONAL_AUDIT_NEW';  -- Nueva CMK
DECLARE @CEK_Name NVARCHAR(128) = 'CEK_FUNC';  -- Column Encryption Key afectada

-- Variables para control de tiempos
DECLARE @TiempoInicio DATETIME2(3);
DECLARE @TiempoFin DATETIME2(3);
DECLARE @TiempoMS INT;
DECLARE @ErrorMessage NVARCHAR(4000);

PRINT '========================================';
PRINT 'ROTACIÓN DE COLUMN MASTER KEY';
PRINT '========================================';
PRINT 'CMK Origen: ' + @CMK_Source;
PRINT 'CMK Destino: ' + @CMK_Target;
PRINT 'CEK a rotar: ' + @CEK_Name;
PRINT '';

-- =====================================================================
-- FASE 1: VERIFICACIONES PREVIAS
-- =====================================================================
SET @TiempoInicio = SYSDATETIME();
PRINT 'Verificando existencia de claves...';

BEGIN TRY
    -- Verificar CMK origen
    IF NOT EXISTS (SELECT 1 FROM sys.column_master_keys WHERE name = @CMK_Source)
    BEGIN
        RAISERROR('CMK origen "%s" no existe', 16, 1, @CMK_Source);
    END
    
    -- Verificar CMK destino
    IF NOT EXISTS (SELECT 1 FROM sys.column_master_keys WHERE name = @CMK_Target)
    BEGIN
        RAISERROR('CMK destino "%s" no existe', 16, 1, @CMK_Target);
    END
    
    -- Verificar CEK
    IF NOT EXISTS (SELECT 1 FROM sys.column_encryption_keys WHERE name = @CEK_Name)
    BEGIN
        RAISERROR('CEK "%s" no existe', 16, 1, @CEK_Name);
    END
    
    SET @TiempoFin = SYSDATETIME();
    SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
    
    INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
    VALUES ('Verificaciones Previas', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'EXITOSO', 'Todas las claves existen');
    
    PRINT '✓ Verificaciones completadas (' + CAST(@TiempoMS AS VARCHAR(10)) + ' ms)';

END TRY
BEGIN CATCH
    SET @TiempoFin = SYSDATETIME();
    SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
    SET @ErrorMessage = ERROR_MESSAGE();
    
    INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
    VALUES ('Verificaciones Previas', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'ERROR', @ErrorMessage);
    
    PRINT '✗ ERROR: ' + @ErrorMessage;
    GOTO FinalizarScript;
END CATCH

-- =====================================================================
-- FASE 2: ROTACIÓN - AGREGAR NUEVA CLAVE A CEK
-- =====================================================================
SET @TiempoInicio = SYSDATETIME();
PRINT '';
PRINT 'Agregando nueva CMK a la CEK...';

BEGIN TRY
    -- Esta es la operación real de rotación que hace SSMS
    -- Agrega un nuevo valor encriptado de la CEK usando la nueva CMK
    DECLARE @SQL_AddValue NVARCHAR(MAX);
    
    -- Obtener el valor encriptado actual de la CEK
    DECLARE @EncryptedValue VARBINARY(8000);
    SELECT TOP 1 @EncryptedValue = cekv.encrypted_value
    FROM sys.column_encryption_key_values cekv
    INNER JOIN sys.column_encryption_keys cek ON cekv.column_encryption_key_id = cek.column_encryption_key_id
    INNER JOIN sys.column_master_keys cmk ON cekv.column_master_key_id = cmk.column_master_key_id
    WHERE cek.name = @CEK_Name AND cmk.name = @CMK_Source;
    
    -- IMPORTANTE: En producción, este valor debe ser calculado por una aplicación
    -- que tenga acceso a ambas CMKs para desencriptar con la antigua y 
    -- re-encriptar con la nueva
    
    -- Para demostración, simulamos el proceso (en producción usar SqlColumnEncryptionSettings)
    IF @EncryptedValue IS NOT NULL
    BEGIN
        SET @SQL_AddValue = 
            'ALTER COLUMN ENCRYPTION KEY [' + @CEK_Name + '] ' +
            'ADD VALUE (' +
            'COLUMN_MASTER_KEY = [' + @CMK_Target + '], ' +
            'ALGORITHM = ''RSA_OAEP'', ' +
            'ENCRYPTED_VALUE = ' + CONVERT(NVARCHAR(MAX), @EncryptedValue, 1) + ')';
        
        -- Nota: Este comando requiere que la aplicación tenga acceso a la CMK física
        -- En un entorno real, esto se haría desde SSMS o PowerShell con los certificados
        PRINT 'SQL generado para rotación:';
        PRINT @SQL_AddValue;
        
        -- Simulación del tiempo de procesamiento de rotación
        WAITFOR DELAY '00:00:01';
        
        SET @TiempoFin = SYSDATETIME();
        SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
        
        INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
        VALUES ('Rotación CMK - Agregar Valor', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'SIMULADO', 'Nuevo valor de CEK generado para nueva CMK');
        
        PRINT '✓ Rotación simulada completada (' + CAST(@TiempoMS AS VARCHAR(10)) + ' ms)';
    END
    ELSE
    BEGIN
        RAISERROR('No se pudo obtener el valor encriptado de la CEK', 16, 1);
    END

END TRY
BEGIN CATCH
    SET @TiempoFin = SYSDATETIME();
    SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
    SET @ErrorMessage = ERROR_MESSAGE();
    
    INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
    VALUES ('Rotación CMK - Agregar Valor', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'ERROR', @ErrorMessage);
    
    PRINT '✗ ERROR en rotación: ' + @ErrorMessage;
    GOTO FinalizarScript;
END CATCH

-- =====================================================================
-- FASE 3: VERIFICACIÓN DEL ESTADO POST-ROTACIÓN
-- =====================================================================
SET @TiempoInicio = SYSDATETIME();
PRINT '';
PRINT 'Verificando resultado de la rotación...';

BEGIN TRY
    -- Verificar que ahora la CEK tiene valores para ambas CMKs
    SELECT 
        cek.name AS CEK_Name,
        cmk.name AS CMK_Name,
        cekv.encrypted_value,
        'Valor para ' + cmk.name AS Descripcion
    FROM sys.column_encryption_key_values cekv
    INNER JOIN sys.column_encryption_keys cek ON cekv.column_encryption_key_id = cek.column_encryption_key_id
    INNER JOIN sys.column_master_keys cmk ON cekv.column_master_key_id = cmk.column_master_key_id
    WHERE cek.name = @CEK_Name;
    
    DECLARE @CountValues INT;
    SELECT @CountValues = COUNT(*)
    FROM sys.column_encryption_key_values cekv
    INNER JOIN sys.column_encryption_keys cek ON cekv.column_encryption_key_id = cek.column_encryption_key_id
    WHERE cek.name = @CEK_Name;
    
    SET @TiempoFin = SYSDATETIME();
    SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
    
    INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
    VALUES ('Verificación Post-Rotación', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'EXITOSO', 
            'CEK ahora tiene ' + CAST(@CountValues AS VARCHAR(5)) + ' valores encriptados');
    
    PRINT '✓ Verificación completada. CEK tiene ' + CAST(@CountValues AS VARCHAR(5)) + ' valores (' + CAST(@TiempoMS AS VARCHAR(10)) + ' ms)';

END TRY
BEGIN CATCH
    SET @TiempoFin = SYSDATETIME();
    SET @TiempoMS = DATEDIFF(MILLISECOND, @TiempoInicio, @TiempoFin);
    SET @ErrorMessage = ERROR_MESSAGE();
    
    INSERT INTO #TiemposEjecucion (Proceso, FechaHoraInicio, FechaHoraFin, TiempoEjecucionMS, TiempoEjecucionSegundos, Estado, Observaciones)
    VALUES ('Verificación Post-Rotación', @TiempoInicio, @TiempoFin, @TiempoMS, @TiempoMS/1000.0, 'ERROR', @ErrorMessage);
    
    PRINT '✗ ERROR en verificación: ' + @ErrorMessage;
END CATCH

FinalizarScript:

-- =====================================================================
-- RESUMEN DE TIEMPOS DE EJECUCIÓN
-- =====================================================================
PRINT '';
PRINT '========================================';
PRINT 'RESUMEN DE TIEMPOS DE EJECUCIÓN';
PRINT '========================================';

-- Resultados detallados
SELECT 
    ID AS [#],
    Proceso,
    FORMAT(FechaHoraInicio, 'HH:mm:ss.fff') AS [Inicio],
    FORMAT(FechaHoraFin, 'HH:mm:ss.fff') AS [Fin],
    TiempoEjecucionMS AS [ms],
    TiempoEjecucionSegundos AS [segundos],
    Estado,
    Observaciones
FROM #TiemposEjecucion
ORDER BY ID;

-- Resumen ejecutivo
PRINT '';
PRINT 'RESUMEN EJECUTIVO:';
SELECT 
    COUNT(*) AS [Total Fases],
    SUM(TiempoEjecucionMS) AS [Tiempo Total (ms)],
    CAST(SUM(TiempoEjecucionSegundos) AS DECIMAL(10,3)) AS [Tiempo Total (seg)],
    SUM(CASE WHEN Estado IN ('EXITOSO', 'SIMULADO') THEN 1 ELSE 0 END) AS [Fases OK],
    SUM(CASE WHEN Estado = 'ERROR' THEN 1 ELSE 0 END) AS [Fases Error],
    FORMAT(MIN(FechaHoraInicio), 'yyyy-MM-dd HH:mm:ss.fff') AS [Inicio Proceso],
    FORMAT(MAX(FechaHoraFin), 'yyyy-MM-dd HH:mm:ss.fff') AS [Fin Proceso]
FROM #TiemposEjecucion;

-- Notas importantes
PRINT '';
PRINT 'NOTAS IMPORTANTES:';
PRINT '- La rotación real requiere acceso a las claves físicas (certificados)';
PRINT '- Los datos en las columnas encriptadas NO se modifican';
PRINT '- Solo se actualizan los metadatos de las CEK';
PRINT '- Las aplicaciones seguirán funcionando durante y después del proceso';

PRINT '';
PRINT 'Script de rotación CMK completado.';


-----------


SELECT 
    dp.permission_name,
    dp.permission_state_desc,
    pr.name AS principal_name
FROM sys.database_permissions dp
    LEFT JOIN sys.database_principals pr ON dp.grantee_principal_id = pr.principal_id
WHERE dp.permission_name IN (
    'ALTER ANY COLUMN MASTER KEY',
    'ALTER ANY COLUMN ENCRYPTION KEY',
    'VIEW ANY COLUMN MASTER KEY DEFINITION', 
    'VIEW ANY COLUMN ENCRYPTION KEY DEFINITION'


---------


-- Cambia 52 por TU Session ID real
DECLARE @MiSessionID INT = 52;

SELECT 
    GETDATE() as Hora_Consulta,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM sys.dm_exec_requests 
            WHERE session_id = @MiSessionID
        ) 
        THEN 'ROTACION EN PROCESO - Sigue ejecutandose'
        ELSE 'ROTACION TERMINADA - Revisar resultados'
    END as Estado_Rotacion;
)
ORDER BY dp.permission_name;
